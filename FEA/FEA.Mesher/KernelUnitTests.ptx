//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19324607
// Cuda compilation tools, release 7.0, V7.0.27
// Based on LLVM 3.4svn
//

.version 4.2
.target sm_20
.address_size 64

	// .globl	_Z5getIdv

.visible .func  (.param .b32 func_retval0) _Z5getIdv(

)
{
	.reg .s32 	%r<17>;


	mov.u32 	%r1, %ctaid.z;
	mov.u32 	%r2, %ctaid.y;
	mov.u32 	%r3, %nctaid.z;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %nctaid.y;
	mad.lo.s32 	%r6, %r5, %r4, %r2;
	mad.lo.s32 	%r7, %r6, %r3, %r1;
	mov.u32 	%r8, %tid.z;
	mov.u32 	%r9, %tid.y;
	mov.u32 	%r10, %ntid.z;
	mov.u32 	%r11, %tid.x;
	mov.u32 	%r12, %ntid.y;
	mov.u32 	%r13, %ntid.x;
	mad.lo.s32 	%r14, %r13, %r7, %r11;
	mad.lo.s32 	%r15, %r14, %r12, %r9;
	mad.lo.s32 	%r16, %r15, %r10, %r8;
	st.param.b32	[func_retval0+0], %r16;
	ret;
}

	// .globl	TestCrossProduct
.visible .entry TestCrossProduct(
	.param .u32 TestCrossProduct_param_0,
	.param .u64 TestCrossProduct_param_1,
	.param .u64 TestCrossProduct_param_2,
	.param .u64 TestCrossProduct_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<16>;
	.reg .s32 	%r<18>;
	.reg .s64 	%rd<11>;


	ld.param.u32 	%r2, [TestCrossProduct_param_0];
	ld.param.u64 	%rd1, [TestCrossProduct_param_1];
	ld.param.u64 	%rd2, [TestCrossProduct_param_2];
	ld.param.u64 	%rd3, [TestCrossProduct_param_3];
	mov.u32 	%r3, %nctaid.y;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ctaid.y;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %nctaid.z;
	mov.u32 	%r8, %ctaid.z;
	mad.lo.s32 	%r9, %r6, %r7, %r8;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r12, %r10, %r9, %r11;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r15, %r12, %r13, %r14;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB1_2;

	cvta.to.global.u64 	%rd4, %rd1;
	cvta.to.global.u64 	%rd5, %rd2;
	mul.wide.s32 	%rd6, %r1, 12;
	add.s64 	%rd7, %rd5, %rd6;
	add.s64 	%rd8, %rd4, %rd6;
	ld.global.f32 	%f1, [%rd8+4];
	ld.global.f32 	%f2, [%rd7];
	ld.global.f32 	%f3, [%rd7+4];
	ld.global.f32 	%f4, [%rd7+8];
	mul.f32 	%f5, %f1, %f4;
	ld.global.f32 	%f6, [%rd8+8];
	mul.f32 	%f7, %f3, %f6;
	sub.f32 	%f8, %f5, %f7;
	mul.f32 	%f9, %f2, %f6;
	ld.global.f32 	%f10, [%rd8];
	mul.f32 	%f11, %f4, %f10;
	sub.f32 	%f12, %f9, %f11;
	mul.f32 	%f13, %f3, %f10;
	mul.f32 	%f14, %f2, %f1;
	sub.f32 	%f15, %f13, %f14;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd6;
	st.global.f32 	[%rd10], %f8;
	st.global.f32 	[%rd10+4], %f12;
	st.global.f32 	[%rd10+8], %f15;

BB1_2:
	ret;
}

	// .globl	_ZN6VectorIfE5CrossES0_
.visible .func  (.param .align 4 .b8 func_retval0[12]) _ZN6VectorIfE5CrossES0_(
	.param .b64 _ZN6VectorIfE5CrossES0__param_0,
	.param .align 4 .b8 _ZN6VectorIfE5CrossES0__param_1[12]
)
{
	.reg .f32 	%f<16>;
	.reg .s64 	%rd<2>;


	ld.param.f32 	%f1, [_ZN6VectorIfE5CrossES0__param_1];
	ld.param.f32 	%f2, [_ZN6VectorIfE5CrossES0__param_1+4];
	ld.param.f32 	%f3, [_ZN6VectorIfE5CrossES0__param_1+8];
	ld.param.u64 	%rd1, [_ZN6VectorIfE5CrossES0__param_0];
	ld.f32 	%f4, [%rd1+4];
	mul.f32 	%f5, %f3, %f4;
	ld.f32 	%f6, [%rd1+8];
	mul.f32 	%f7, %f2, %f6;
	sub.f32 	%f8, %f5, %f7;
	mul.f32 	%f9, %f1, %f6;
	ld.f32 	%f10, [%rd1];
	mul.f32 	%f11, %f3, %f10;
	sub.f32 	%f12, %f9, %f11;
	mul.f32 	%f13, %f2, %f10;
	mul.f32 	%f14, %f1, %f4;
	sub.f32 	%f15, %f13, %f14;
	st.param.f32	[func_retval0+0], %f8;
	st.param.f32	[func_retval0+4], %f12;
	st.param.f32	[func_retval0+8], %f15;
	ret;
}

	// .globl	TestDotProduct
.visible .entry TestDotProduct(
	.param .u32 TestDotProduct_param_0,
	.param .u64 TestDotProduct_param_1,
	.param .u64 TestDotProduct_param_2,
	.param .u64 TestDotProduct_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<10>;
	.reg .s32 	%r<18>;
	.reg .s64 	%rd<12>;


	ld.param.u32 	%r2, [TestDotProduct_param_0];
	ld.param.u64 	%rd1, [TestDotProduct_param_1];
	ld.param.u64 	%rd2, [TestDotProduct_param_2];
	ld.param.u64 	%rd3, [TestDotProduct_param_3];
	mov.u32 	%r3, %nctaid.y;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ctaid.y;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %nctaid.z;
	mov.u32 	%r8, %ctaid.z;
	mad.lo.s32 	%r9, %r6, %r7, %r8;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r12, %r10, %r9, %r11;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r15, %r12, %r13, %r14;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB3_2;

	cvta.to.global.u64 	%rd4, %rd1;
	cvta.to.global.u64 	%rd5, %rd2;
	mul.wide.s32 	%rd6, %r1, 12;
	add.s64 	%rd7, %rd5, %rd6;
	add.s64 	%rd8, %rd4, %rd6;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd7+8];
	ld.global.f32 	%f3, [%rd7];
	ld.global.f32 	%f4, [%rd7+4];
	ld.global.f32 	%f5, [%rd8+4];
	mul.f32 	%f6, %f4, %f5;
	fma.rn.f32 	%f7, %f1, %f3, %f6;
	ld.global.f32 	%f8, [%rd8+8];
	fma.rn.f32 	%f9, %f2, %f8, %f7;
	cvta.to.global.u64 	%rd9, %rd3;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.f32 	[%rd11], %f9;

BB3_2:
	ret;
}

	// .globl	_ZN6VectorIfE3DotES0_
.visible .func  (.param .b32 func_retval0) _ZN6VectorIfE3DotES0_(
	.param .b64 _ZN6VectorIfE3DotES0__param_0,
	.param .align 4 .b8 _ZN6VectorIfE3DotES0__param_1[12]
)
{
	.reg .f32 	%f<10>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN6VectorIfE3DotES0__param_0];
	ld.param.f32 	%f1, [_ZN6VectorIfE3DotES0__param_1+8];
	ld.param.f32 	%f2, [_ZN6VectorIfE3DotES0__param_1];
	ld.param.f32 	%f3, [_ZN6VectorIfE3DotES0__param_1+4];
	ld.f32 	%f4, [%rd1];
	ld.f32 	%f5, [%rd1+4];
	mul.f32 	%f6, %f3, %f5;
	fma.rn.f32 	%f7, %f2, %f4, %f6;
	ld.f32 	%f8, [%rd1+8];
	fma.rn.f32 	%f9, %f1, %f8, %f7;
	st.param.f32	[func_retval0+0], %f9;
	ret;
}

	// .globl	TestAdd
.visible .entry TestAdd(
	.param .u32 TestAdd_param_0,
	.param .u64 TestAdd_param_1,
	.param .u64 TestAdd_param_2,
	.param .u64 TestAdd_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<10>;
	.reg .s32 	%r<18>;
	.reg .s64 	%rd<11>;


	ld.param.u32 	%r2, [TestAdd_param_0];
	ld.param.u64 	%rd1, [TestAdd_param_1];
	ld.param.u64 	%rd2, [TestAdd_param_2];
	ld.param.u64 	%rd3, [TestAdd_param_3];
	mov.u32 	%r3, %nctaid.y;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ctaid.y;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %nctaid.z;
	mov.u32 	%r8, %ctaid.z;
	mad.lo.s32 	%r9, %r6, %r7, %r8;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r12, %r10, %r9, %r11;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r15, %r12, %r13, %r14;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB5_2;

	cvta.to.global.u64 	%rd4, %rd1;
	cvta.to.global.u64 	%rd5, %rd2;
	mul.wide.s32 	%rd6, %r1, 12;
	add.s64 	%rd7, %rd5, %rd6;
	add.s64 	%rd8, %rd4, %rd6;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd7+8];
	ld.global.f32 	%f3, [%rd7+4];
	ld.global.f32 	%f4, [%rd7];
	add.f32 	%f5, %f1, %f4;
	ld.global.f32 	%f6, [%rd8+4];
	add.f32 	%f7, %f3, %f6;
	ld.global.f32 	%f8, [%rd8+8];
	add.f32 	%f9, %f2, %f8;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd6;
	st.global.f32 	[%rd10], %f5;
	st.global.f32 	[%rd10+4], %f7;
	st.global.f32 	[%rd10+8], %f9;

BB5_2:
	ret;
}

	// .globl	_ZN6VectorIfEplES0_
.visible .func  (.param .align 4 .b8 func_retval0[12]) _ZN6VectorIfEplES0_(
	.param .b64 _ZN6VectorIfEplES0__param_0,
	.param .align 4 .b8 _ZN6VectorIfEplES0__param_1[12]
)
{
	.reg .f32 	%f<10>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN6VectorIfEplES0__param_0];
	ld.param.f32 	%f1, [_ZN6VectorIfEplES0__param_1+8];
	ld.param.f32 	%f2, [_ZN6VectorIfEplES0__param_1+4];
	ld.param.f32 	%f3, [_ZN6VectorIfEplES0__param_1];
	ld.f32 	%f4, [%rd1];
	add.f32 	%f5, %f3, %f4;
	ld.f32 	%f6, [%rd1+4];
	add.f32 	%f7, %f2, %f6;
	ld.f32 	%f8, [%rd1+8];
	add.f32 	%f9, %f1, %f8;
	st.param.f32	[func_retval0+0], %f5;
	st.param.f32	[func_retval0+4], %f7;
	st.param.f32	[func_retval0+8], %f9;
	ret;
}

	// .globl	TestSubtract
.visible .entry TestSubtract(
	.param .u32 TestSubtract_param_0,
	.param .u64 TestSubtract_param_1,
	.param .u64 TestSubtract_param_2,
	.param .u64 TestSubtract_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<10>;
	.reg .s32 	%r<18>;
	.reg .s64 	%rd<11>;


	ld.param.u32 	%r2, [TestSubtract_param_0];
	ld.param.u64 	%rd1, [TestSubtract_param_1];
	ld.param.u64 	%rd2, [TestSubtract_param_2];
	ld.param.u64 	%rd3, [TestSubtract_param_3];
	mov.u32 	%r3, %nctaid.y;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ctaid.y;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %nctaid.z;
	mov.u32 	%r8, %ctaid.z;
	mad.lo.s32 	%r9, %r6, %r7, %r8;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r12, %r10, %r9, %r11;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r15, %r12, %r13, %r14;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB7_2;

	cvta.to.global.u64 	%rd4, %rd1;
	cvta.to.global.u64 	%rd5, %rd2;
	mul.wide.s32 	%rd6, %r1, 12;
	add.s64 	%rd7, %rd5, %rd6;
	add.s64 	%rd8, %rd4, %rd6;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd7+8];
	ld.global.f32 	%f3, [%rd7+4];
	ld.global.f32 	%f4, [%rd7];
	sub.f32 	%f5, %f1, %f4;
	ld.global.f32 	%f6, [%rd8+4];
	sub.f32 	%f7, %f6, %f3;
	ld.global.f32 	%f8, [%rd8+8];
	sub.f32 	%f9, %f8, %f2;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd6;
	st.global.f32 	[%rd10], %f5;
	st.global.f32 	[%rd10+4], %f7;
	st.global.f32 	[%rd10+8], %f9;

BB7_2:
	ret;
}

	// .globl	_ZN6VectorIfEmiES0_
.visible .func  (.param .align 4 .b8 func_retval0[12]) _ZN6VectorIfEmiES0_(
	.param .b64 _ZN6VectorIfEmiES0__param_0,
	.param .align 4 .b8 _ZN6VectorIfEmiES0__param_1[12]
)
{
	.reg .f32 	%f<10>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN6VectorIfEmiES0__param_0];
	ld.param.f32 	%f1, [_ZN6VectorIfEmiES0__param_1+8];
	ld.param.f32 	%f2, [_ZN6VectorIfEmiES0__param_1+4];
	ld.param.f32 	%f3, [_ZN6VectorIfEmiES0__param_1];
	ld.f32 	%f4, [%rd1];
	sub.f32 	%f5, %f4, %f3;
	ld.f32 	%f6, [%rd1+4];
	sub.f32 	%f7, %f6, %f2;
	ld.f32 	%f8, [%rd1+8];
	sub.f32 	%f9, %f8, %f1;
	st.param.f32	[func_retval0+0], %f5;
	st.param.f32	[func_retval0+4], %f7;
	st.param.f32	[func_retval0+8], %f9;
	ret;
}

	// .globl	TestMultiply
.visible .entry TestMultiply(
	.param .u32 TestMultiply_param_0,
	.param .u64 TestMultiply_param_1,
	.param .u64 TestMultiply_param_2,
	.param .u64 TestMultiply_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<8>;
	.reg .s32 	%r<18>;
	.reg .s64 	%rd<12>;


	ld.param.u32 	%r2, [TestMultiply_param_0];
	ld.param.u64 	%rd1, [TestMultiply_param_1];
	ld.param.u64 	%rd2, [TestMultiply_param_2];
	ld.param.u64 	%rd3, [TestMultiply_param_3];
	mov.u32 	%r3, %nctaid.y;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ctaid.y;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %nctaid.z;
	mov.u32 	%r8, %ctaid.z;
	mad.lo.s32 	%r9, %r6, %r7, %r8;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r12, %r10, %r9, %r11;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r15, %r12, %r13, %r14;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB9_2;

	cvta.to.global.u64 	%rd4, %rd1;
	cvta.to.global.u64 	%rd5, %rd2;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	mul.wide.s32 	%rd8, %r1, 12;
	add.s64 	%rd9, %rd4, %rd8;
	ld.global.f32 	%f1, [%rd9];
	ld.global.f32 	%f2, [%rd7];
	mul.f32 	%f3, %f2, %f1;
	ld.global.f32 	%f4, [%rd9+4];
	mul.f32 	%f5, %f2, %f4;
	ld.global.f32 	%f6, [%rd9+8];
	mul.f32 	%f7, %f2, %f6;
	cvta.to.global.u64 	%rd10, %rd3;
	add.s64 	%rd11, %rd10, %rd8;
	st.global.f32 	[%rd11], %f3;
	st.global.f32 	[%rd11+4], %f5;
	st.global.f32 	[%rd11+8], %f7;

BB9_2:
	ret;
}

	// .globl	_ZN6VectorIfEmlEf
.visible .func  (.param .align 4 .b8 func_retval0[12]) _ZN6VectorIfEmlEf(
	.param .b64 _ZN6VectorIfEmlEf_param_0,
	.param .b32 _ZN6VectorIfEmlEf_param_1
)
{
	.reg .f32 	%f<8>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN6VectorIfEmlEf_param_0];
	ld.param.f32 	%f1, [_ZN6VectorIfEmlEf_param_1];
	ld.f32 	%f2, [%rd1];
	mul.f32 	%f3, %f2, %f1;
	ld.f32 	%f4, [%rd1+4];
	mul.f32 	%f5, %f4, %f1;
	ld.f32 	%f6, [%rd1+8];
	mul.f32 	%f7, %f6, %f1;
	st.param.f32	[func_retval0+0], %f3;
	st.param.f32	[func_retval0+4], %f5;
	st.param.f32	[func_retval0+8], %f7;
	ret;
}

	// .globl	TestDivide
.visible .entry TestDivide(
	.param .u32 TestDivide_param_0,
	.param .u64 TestDivide_param_1,
	.param .u64 TestDivide_param_2,
	.param .u64 TestDivide_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<8>;
	.reg .s32 	%r<18>;
	.reg .s64 	%rd<12>;


	ld.param.u32 	%r2, [TestDivide_param_0];
	ld.param.u64 	%rd1, [TestDivide_param_1];
	ld.param.u64 	%rd2, [TestDivide_param_2];
	ld.param.u64 	%rd3, [TestDivide_param_3];
	mov.u32 	%r3, %nctaid.y;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ctaid.y;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %nctaid.z;
	mov.u32 	%r8, %ctaid.z;
	mad.lo.s32 	%r9, %r6, %r7, %r8;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r12, %r10, %r9, %r11;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r15, %r12, %r13, %r14;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB11_2;

	cvta.to.global.u64 	%rd4, %rd1;
	cvta.to.global.u64 	%rd5, %rd2;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	mul.wide.s32 	%rd8, %r1, 12;
	add.s64 	%rd9, %rd4, %rd8;
	ld.global.f32 	%f1, [%rd9];
	ld.global.f32 	%f2, [%rd7];
	div.rn.f32 	%f3, %f1, %f2;
	ld.global.f32 	%f4, [%rd9+4];
	div.rn.f32 	%f5, %f4, %f2;
	ld.global.f32 	%f6, [%rd9+8];
	div.rn.f32 	%f7, %f6, %f2;
	cvta.to.global.u64 	%rd10, %rd3;
	add.s64 	%rd11, %rd10, %rd8;
	st.global.f32 	[%rd11], %f3;
	st.global.f32 	[%rd11+4], %f5;
	st.global.f32 	[%rd11+8], %f7;

BB11_2:
	ret;
}

	// .globl	_ZN6VectorIfEdvEf
.visible .func  (.param .align 4 .b8 func_retval0[12]) _ZN6VectorIfEdvEf(
	.param .b64 _ZN6VectorIfEdvEf_param_0,
	.param .b32 _ZN6VectorIfEdvEf_param_1
)
{
	.reg .f32 	%f<8>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN6VectorIfEdvEf_param_0];
	ld.param.f32 	%f1, [_ZN6VectorIfEdvEf_param_1];
	ld.f32 	%f2, [%rd1];
	div.rn.f32 	%f3, %f2, %f1;
	ld.f32 	%f4, [%rd1+4];
	div.rn.f32 	%f5, %f4, %f1;
	ld.f32 	%f6, [%rd1+8];
	div.rn.f32 	%f7, %f6, %f1;
	st.param.f32	[func_retval0+0], %f3;
	st.param.f32	[func_retval0+4], %f5;
	st.param.f32	[func_retval0+8], %f7;
	ret;
}

	// .globl	TestLength
.visible .entry TestLength(
	.param .u32 TestLength_param_0,
	.param .u64 TestLength_param_1,
	.param .u64 TestLength_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<8>;
	.reg .s32 	%r<18>;
	.reg .s64 	%rd<9>;


	ld.param.u32 	%r2, [TestLength_param_0];
	ld.param.u64 	%rd1, [TestLength_param_1];
	ld.param.u64 	%rd2, [TestLength_param_2];
	mov.u32 	%r3, %nctaid.y;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ctaid.y;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %nctaid.z;
	mov.u32 	%r8, %ctaid.z;
	mad.lo.s32 	%r9, %r6, %r7, %r8;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r12, %r10, %r9, %r11;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r15, %r12, %r13, %r14;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB13_2;

	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 12;
	add.s64 	%rd6, %rd3, %rd5;
	ld.global.f32 	%f1, [%rd6];
	ld.global.f32 	%f2, [%rd6+4];
	mul.f32 	%f3, %f2, %f2;
	fma.rn.f32 	%f4, %f1, %f1, %f3;
	ld.global.f32 	%f5, [%rd6+8];
	fma.rn.f32 	%f6, %f5, %f5, %f4;
	sqrt.rn.f32 	%f7, %f6;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd4, %rd7;
	st.global.f32 	[%rd8], %f7;

BB13_2:
	ret;
}

	// .globl	_ZN6VectorIfE6LengthEv
.visible .func  (.param .b32 func_retval0) _ZN6VectorIfE6LengthEv(
	.param .b64 _ZN6VectorIfE6LengthEv_param_0
)
{
	.reg .f32 	%f<8>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN6VectorIfE6LengthEv_param_0];
	ld.f32 	%f1, [%rd1];
	ld.f32 	%f2, [%rd1+4];
	mul.f32 	%f3, %f2, %f2;
	fma.rn.f32 	%f4, %f1, %f1, %f3;
	ld.f32 	%f5, [%rd1+8];
	fma.rn.f32 	%f6, %f5, %f5, %f4;
	sqrt.rn.f32 	%f7, %f6;
	st.param.f32	[func_retval0+0], %f7;
	ret;
}

	// .globl	TestNormalize
.visible .entry TestNormalize(
	.param .u32 TestNormalize_param_0,
	.param .u64 TestNormalize_param_1,
	.param .u64 TestNormalize_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<14>;
	.reg .s32 	%r<18>;
	.reg .s64 	%rd<8>;


	ld.param.u32 	%r2, [TestNormalize_param_0];
	ld.param.u64 	%rd1, [TestNormalize_param_1];
	ld.param.u64 	%rd2, [TestNormalize_param_2];
	mov.u32 	%r3, %nctaid.y;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ctaid.y;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %nctaid.z;
	mov.u32 	%r8, %ctaid.z;
	mad.lo.s32 	%r9, %r6, %r7, %r8;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r12, %r10, %r9, %r11;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r15, %r12, %r13, %r14;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB15_2;

	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 12;
	add.s64 	%rd6, %rd3, %rd5;
	add.s64 	%rd7, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd7];
	ld.global.f32 	%f2, [%rd7+4];
	ld.global.f32 	%f3, [%rd7+8];
	st.global.f32 	[%rd6+8], %f3;
	st.global.f32 	[%rd6+4], %f2;
	st.global.f32 	[%rd6], %f1;
	ld.global.f32 	%f4, [%rd6];
	ld.global.f32 	%f5, [%rd6+4];
	mul.f32 	%f6, %f5, %f5;
	fma.rn.f32 	%f7, %f4, %f4, %f6;
	ld.global.f32 	%f8, [%rd6+8];
	fma.rn.f32 	%f9, %f8, %f8, %f7;
	sqrt.rn.f32 	%f10, %f9;
	div.rn.f32 	%f11, %f4, %f10;
	st.global.f32 	[%rd6], %f11;
	div.rn.f32 	%f12, %f5, %f10;
	st.global.f32 	[%rd6+4], %f12;
	div.rn.f32 	%f13, %f8, %f10;
	st.global.f32 	[%rd6+8], %f13;

BB15_2:
	ret;
}

	// .globl	_ZN6VectorIfE9NormalizeEv
.visible .func _ZN6VectorIfE9NormalizeEv(
	.param .b64 _ZN6VectorIfE9NormalizeEv_param_0
)
{
	.reg .f32 	%f<11>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN6VectorIfE9NormalizeEv_param_0];
	ld.f32 	%f1, [%rd1];
	ld.f32 	%f2, [%rd1+4];
	mul.f32 	%f3, %f2, %f2;
	fma.rn.f32 	%f4, %f1, %f1, %f3;
	ld.f32 	%f5, [%rd1+8];
	fma.rn.f32 	%f6, %f5, %f5, %f4;
	sqrt.rn.f32 	%f7, %f6;
	div.rn.f32 	%f8, %f1, %f7;
	st.f32 	[%rd1], %f8;
	div.rn.f32 	%f9, %f2, %f7;
	st.f32 	[%rd1+4], %f9;
	div.rn.f32 	%f10, %f5, %f7;
	st.f32 	[%rd1+8], %f10;
	ret;
}

	// .globl	TestTriangleArea
.visible .entry TestTriangleArea(
	.param .u32 TestTriangleArea_param_0,
	.param .u64 TestTriangleArea_param_1,
	.param .u64 TestTriangleArea_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<30>;
	.reg .s32 	%r<18>;
	.reg .s64 	%rd<9>;


	ld.param.u32 	%r2, [TestTriangleArea_param_0];
	ld.param.u64 	%rd1, [TestTriangleArea_param_1];
	ld.param.u64 	%rd2, [TestTriangleArea_param_2];
	mov.u32 	%r3, %nctaid.y;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ctaid.y;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %nctaid.z;
	mov.u32 	%r8, %ctaid.z;
	mad.lo.s32 	%r9, %r6, %r7, %r8;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r12, %r10, %r9, %r11;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r15, %r12, %r13, %r14;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB17_2;

	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 52;
	add.s64 	%rd6, %rd3, %rd5;
	ld.global.f32 	%f1, [%rd6+24];
	ld.global.f32 	%f2, [%rd6+20];
	ld.global.f32 	%f3, [%rd6+16];
	ld.global.f32 	%f4, [%rd6+12];
	sub.f32 	%f5, %f1, %f4;
	ld.global.f32 	%f6, [%rd6+28];
	sub.f32 	%f7, %f6, %f3;
	ld.global.f32 	%f8, [%rd6+32];
	sub.f32 	%f9, %f8, %f2;
	ld.global.f32 	%f10, [%rd6+36];
	sub.f32 	%f11, %f10, %f4;
	ld.global.f32 	%f12, [%rd6+40];
	sub.f32 	%f13, %f12, %f3;
	ld.global.f32 	%f14, [%rd6+44];
	sub.f32 	%f15, %f14, %f2;
	mul.f32 	%f16, %f7, %f15;
	mul.f32 	%f17, %f9, %f13;
	sub.f32 	%f18, %f16, %f17;
	mul.f32 	%f19, %f9, %f11;
	mul.f32 	%f20, %f5, %f15;
	sub.f32 	%f21, %f19, %f20;
	mul.f32 	%f22, %f5, %f13;
	mul.f32 	%f23, %f7, %f11;
	sub.f32 	%f24, %f22, %f23;
	mul.f32 	%f25, %f21, %f21;
	fma.rn.f32 	%f26, %f18, %f18, %f25;
	fma.rn.f32 	%f27, %f24, %f24, %f26;
	sqrt.rn.f32 	%f28, %f27;
	mul.f32 	%f29, %f28, 0f3F000000;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd4, %rd7;
	st.global.f32 	[%rd8], %f29;

BB17_2:
	ret;
}

	// .globl	_ZN8TriangleIfE4AreaEv
.visible .func  (.param .b32 func_retval0) _ZN8TriangleIfE4AreaEv(
	.param .b64 _ZN8TriangleIfE4AreaEv_param_0
)
{
	.reg .f32 	%f<30>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN8TriangleIfE4AreaEv_param_0];
	ld.f32 	%f1, [%rd1+20];
	ld.f32 	%f2, [%rd1+16];
	ld.f32 	%f3, [%rd1+12];
	ld.f32 	%f4, [%rd1+24];
	sub.f32 	%f5, %f4, %f3;
	ld.f32 	%f6, [%rd1+28];
	sub.f32 	%f7, %f6, %f2;
	ld.f32 	%f8, [%rd1+32];
	sub.f32 	%f9, %f8, %f1;
	ld.f32 	%f10, [%rd1+36];
	sub.f32 	%f11, %f10, %f3;
	ld.f32 	%f12, [%rd1+40];
	sub.f32 	%f13, %f12, %f2;
	ld.f32 	%f14, [%rd1+44];
	sub.f32 	%f15, %f14, %f1;
	mul.f32 	%f16, %f7, %f15;
	mul.f32 	%f17, %f9, %f13;
	sub.f32 	%f18, %f16, %f17;
	mul.f32 	%f19, %f9, %f11;
	mul.f32 	%f20, %f5, %f15;
	sub.f32 	%f21, %f19, %f20;
	mul.f32 	%f22, %f5, %f13;
	mul.f32 	%f23, %f7, %f11;
	sub.f32 	%f24, %f22, %f23;
	mul.f32 	%f25, %f21, %f21;
	fma.rn.f32 	%f26, %f18, %f18, %f25;
	fma.rn.f32 	%f27, %f24, %f24, %f26;
	sqrt.rn.f32 	%f28, %f27;
	mul.f32 	%f29, %f28, 0f3F000000;
	st.param.f32	[func_retval0+0], %f29;
	ret;
}

	// .globl	TestNormalVector
.visible .entry TestNormalVector(
	.param .u32 TestNormalVector_param_0,
	.param .u64 TestNormalVector_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<25>;
	.reg .s32 	%r<18>;
	.reg .s64 	%rd<5>;


	ld.param.u32 	%r2, [TestNormalVector_param_0];
	ld.param.u64 	%rd1, [TestNormalVector_param_1];
	mov.u32 	%r3, %nctaid.y;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ctaid.y;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %nctaid.z;
	mov.u32 	%r8, %ctaid.z;
	mad.lo.s32 	%r9, %r6, %r7, %r8;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r12, %r10, %r9, %r11;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r15, %r12, %r13, %r14;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB19_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 52;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f1, [%rd4+12];
	ld.global.f32 	%f2, [%rd4+32];
	ld.global.f32 	%f3, [%rd4+28];
	ld.global.f32 	%f4, [%rd4+24];
	sub.f32 	%f5, %f1, %f4;
	ld.global.f32 	%f6, [%rd4+16];
	sub.f32 	%f7, %f6, %f3;
	ld.global.f32 	%f8, [%rd4+20];
	sub.f32 	%f9, %f8, %f2;
	ld.global.f32 	%f10, [%rd4+44];
	ld.global.f32 	%f11, [%rd4+40];
	ld.global.f32 	%f12, [%rd4+36];
	sub.f32 	%f13, %f4, %f12;
	sub.f32 	%f14, %f3, %f11;
	sub.f32 	%f15, %f2, %f10;
	mul.f32 	%f16, %f7, %f15;
	mul.f32 	%f17, %f9, %f14;
	sub.f32 	%f18, %f16, %f17;
	mul.f32 	%f19, %f9, %f13;
	mul.f32 	%f20, %f5, %f15;
	sub.f32 	%f21, %f19, %f20;
	mul.f32 	%f22, %f5, %f14;
	mul.f32 	%f23, %f7, %f13;
	sub.f32 	%f24, %f22, %f23;
	st.global.f32 	[%rd4], %f18;
	st.global.f32 	[%rd4+4], %f21;
	st.global.f32 	[%rd4+8], %f24;

BB19_2:
	ret;
}

	// .globl	_ZN8TriangleIfE12NormalVectorEv
.visible .func _ZN8TriangleIfE12NormalVectorEv(
	.param .b64 _ZN8TriangleIfE12NormalVectorEv_param_0
)
{
	.reg .f32 	%f<25>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN8TriangleIfE12NormalVectorEv_param_0];
	ld.f32 	%f1, [%rd1+32];
	ld.f32 	%f2, [%rd1+28];
	ld.f32 	%f3, [%rd1+24];
	ld.f32 	%f4, [%rd1+12];
	sub.f32 	%f5, %f4, %f3;
	ld.f32 	%f6, [%rd1+16];
	sub.f32 	%f7, %f6, %f2;
	ld.f32 	%f8, [%rd1+20];
	sub.f32 	%f9, %f8, %f1;
	ld.f32 	%f10, [%rd1+44];
	ld.f32 	%f11, [%rd1+40];
	ld.f32 	%f12, [%rd1+36];
	sub.f32 	%f13, %f3, %f12;
	sub.f32 	%f14, %f2, %f11;
	sub.f32 	%f15, %f1, %f10;
	mul.f32 	%f16, %f7, %f15;
	mul.f32 	%f17, %f9, %f14;
	sub.f32 	%f18, %f16, %f17;
	mul.f32 	%f19, %f9, %f13;
	mul.f32 	%f20, %f5, %f15;
	sub.f32 	%f21, %f19, %f20;
	mul.f32 	%f22, %f5, %f14;
	mul.f32 	%f23, %f7, %f13;
	sub.f32 	%f24, %f22, %f23;
	st.f32 	[%rd1], %f18;
	st.f32 	[%rd1+4], %f21;
	st.f32 	[%rd1+8], %f24;
	ret;
}

	// .globl	TestPlaneIntersection
.visible .entry TestPlaneIntersection(
	.param .u32 TestPlaneIntersection_param_0,
	.param .u64 TestPlaneIntersection_param_1,
	.param .u64 TestPlaneIntersection_param_2,
	.param .u64 TestPlaneIntersection_param_3,
	.param .u64 TestPlaneIntersection_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<18>;
	.reg .s32 	%r<18>;
	.reg .f64 	%fd<6>;
	.reg .s64 	%rd<16>;


	ld.param.u32 	%r2, [TestPlaneIntersection_param_0];
	ld.param.u64 	%rd1, [TestPlaneIntersection_param_1];
	ld.param.u64 	%rd2, [TestPlaneIntersection_param_2];
	ld.param.u64 	%rd3, [TestPlaneIntersection_param_3];
	ld.param.u64 	%rd4, [TestPlaneIntersection_param_4];
	mov.u32 	%r3, %nctaid.y;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ctaid.y;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %nctaid.z;
	mov.u32 	%r8, %ctaid.z;
	mad.lo.s32 	%r9, %r6, %r7, %r8;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r12, %r10, %r9, %r11;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r15, %r12, %r13, %r14;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB21_2;

	cvta.to.global.u64 	%rd5, %rd1;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 12;
	add.s64 	%rd8, %rd6, %rd7;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd7;
	mul.wide.s32 	%rd11, %r1, 16;
	add.s64 	%rd12, %rd5, %rd11;
	ld.global.f32 	%f1, [%rd12+8];
	ld.global.f32 	%f2, [%rd12];
	ld.global.f32 	%f3, [%rd12+4];
	ld.global.f32 	%f4, [%rd8+8];
	ld.global.f32 	%f5, [%rd8];
	ld.global.f32 	%f6, [%rd8+4];
	mul.f32 	%f7, %f6, %f3;
	fma.rn.f32 	%f8, %f5, %f2, %f7;
	fma.rn.f32 	%f9, %f4, %f1, %f8;
	cvt.f64.f32	%fd1, %f9;
	ld.global.f32 	%f10, [%rd12+12];
	cvt.f64.f32	%fd2, %f10;
	sub.f64 	%fd3, %fd2, %fd1;
	ld.global.f32 	%f11, [%rd10+8];
	ld.global.f32 	%f12, [%rd10];
	ld.global.f32 	%f13, [%rd10+4];
	mul.f32 	%f14, %f13, %f3;
	fma.rn.f32 	%f15, %f12, %f2, %f14;
	fma.rn.f32 	%f16, %f11, %f1, %f15;
	cvt.f64.f32	%fd4, %f16;
	div.rn.f64 	%fd5, %fd3, %fd4;
	cvt.rn.f32.f64	%f17, %fd5;
	cvta.to.global.u64 	%rd13, %rd4;
	mul.wide.s32 	%rd14, %r1, 4;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.f32 	[%rd15], %f17;

BB21_2:
	ret;
}

	// .globl	_ZN5PlaneIfE12IntersectionE6VectorIfES2_
.visible .func  (.param .b32 func_retval0) _ZN5PlaneIfE12IntersectionE6VectorIfES2_(
	.param .b64 _ZN5PlaneIfE12IntersectionE6VectorIfES2__param_0,
	.param .align 4 .b8 _ZN5PlaneIfE12IntersectionE6VectorIfES2__param_1[12],
	.param .align 4 .b8 _ZN5PlaneIfE12IntersectionE6VectorIfES2__param_2[12]
)
{
	.reg .f32 	%f<18>;
	.reg .f64 	%fd<6>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN5PlaneIfE12IntersectionE6VectorIfES2__param_0];
	ld.param.f32 	%f1, [_ZN5PlaneIfE12IntersectionE6VectorIfES2__param_1+8];
	ld.param.f32 	%f2, [_ZN5PlaneIfE12IntersectionE6VectorIfES2__param_1];
	ld.param.f32 	%f3, [_ZN5PlaneIfE12IntersectionE6VectorIfES2__param_1+4];
	ld.param.f32 	%f4, [_ZN5PlaneIfE12IntersectionE6VectorIfES2__param_2+8];
	ld.param.f32 	%f5, [_ZN5PlaneIfE12IntersectionE6VectorIfES2__param_2];
	ld.param.f32 	%f6, [_ZN5PlaneIfE12IntersectionE6VectorIfES2__param_2+4];
	ld.f32 	%f7, [%rd1+8];
	ld.f32 	%f8, [%rd1];
	ld.f32 	%f9, [%rd1+4];
	mul.f32 	%f10, %f3, %f9;
	fma.rn.f32 	%f11, %f2, %f8, %f10;
	fma.rn.f32 	%f12, %f1, %f7, %f11;
	cvt.f64.f32	%fd1, %f12;
	ld.f32 	%f13, [%rd1+12];
	cvt.f64.f32	%fd2, %f13;
	sub.f64 	%fd3, %fd2, %fd1;
	mul.f32 	%f14, %f6, %f9;
	fma.rn.f32 	%f15, %f5, %f8, %f14;
	fma.rn.f32 	%f16, %f4, %f7, %f15;
	cvt.f64.f32	%fd4, %f16;
	div.rn.f64 	%fd5, %fd3, %fd4;
	cvt.rn.f32.f64	%f17, %fd5;
	st.param.f32	[func_retval0+0], %f17;
	ret;
}

	// .globl	TestCentroidCalculations
.visible .entry TestCentroidCalculations(
	.param .u32 TestCentroidCalculations_param_0,
	.param .u64 TestCentroidCalculations_param_1,
	.param .u64 TestCentroidCalculations_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<19>;
	.reg .s32 	%r<18>;
	.reg .s64 	%rd<9>;


	ld.param.u32 	%r2, [TestCentroidCalculations_param_0];
	ld.param.u64 	%rd1, [TestCentroidCalculations_param_1];
	ld.param.u64 	%rd2, [TestCentroidCalculations_param_2];
	mov.u32 	%r3, %nctaid.y;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ctaid.y;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %nctaid.z;
	mov.u32 	%r8, %ctaid.z;
	mad.lo.s32 	%r9, %r6, %r7, %r8;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r12, %r10, %r9, %r11;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r15, %r12, %r13, %r14;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB23_2;

	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 52;
	add.s64 	%rd6, %rd3, %rd5;
	ld.global.f32 	%f1, [%rd6+12];
	ld.global.f32 	%f2, [%rd6+32];
	ld.global.f32 	%f3, [%rd6+28];
	ld.global.f32 	%f4, [%rd6+24];
	add.f32 	%f5, %f1, %f4;
	ld.global.f32 	%f6, [%rd6+16];
	add.f32 	%f7, %f3, %f6;
	ld.global.f32 	%f8, [%rd6+20];
	add.f32 	%f9, %f2, %f8;
	ld.global.f32 	%f10, [%rd6+44];
	ld.global.f32 	%f11, [%rd6+40];
	ld.global.f32 	%f12, [%rd6+36];
	add.f32 	%f13, %f5, %f12;
	add.f32 	%f14, %f7, %f11;
	add.f32 	%f15, %f9, %f10;
	div.rn.f32 	%f16, %f13, 0f40400000;
	div.rn.f32 	%f17, %f14, 0f40400000;
	div.rn.f32 	%f18, %f15, 0f40400000;
	mul.wide.s32 	%rd7, %r1, 12;
	add.s64 	%rd8, %rd4, %rd7;
	st.global.f32 	[%rd8], %f16;
	st.global.f32 	[%rd8+4], %f17;
	st.global.f32 	[%rd8+8], %f18;

BB23_2:
	ret;
}

	// .globl	_ZN8TriangleIfE8CentroidEv
.visible .func  (.param .align 4 .b8 func_retval0[12]) _ZN8TriangleIfE8CentroidEv(
	.param .b64 _ZN8TriangleIfE8CentroidEv_param_0
)
{
	.reg .f32 	%f<19>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN8TriangleIfE8CentroidEv_param_0];
	ld.f32 	%f1, [%rd1+32];
	ld.f32 	%f2, [%rd1+28];
	ld.f32 	%f3, [%rd1+24];
	ld.f32 	%f4, [%rd1+12];
	add.f32 	%f5, %f4, %f3;
	ld.f32 	%f6, [%rd1+16];
	add.f32 	%f7, %f2, %f6;
	ld.f32 	%f8, [%rd1+20];
	add.f32 	%f9, %f1, %f8;
	ld.f32 	%f10, [%rd1+44];
	ld.f32 	%f11, [%rd1+40];
	ld.f32 	%f12, [%rd1+36];
	add.f32 	%f13, %f5, %f12;
	add.f32 	%f14, %f7, %f11;
	add.f32 	%f15, %f9, %f10;
	div.rn.f32 	%f16, %f13, 0f40400000;
	div.rn.f32 	%f17, %f14, 0f40400000;
	div.rn.f32 	%f18, %f15, 0f40400000;
	st.param.f32	[func_retval0+0], %f16;
	st.param.f32	[func_retval0+4], %f17;
	st.param.f32	[func_retval0+8], %f18;
	ret;
}


