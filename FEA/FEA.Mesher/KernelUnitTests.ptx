	.version 1.4
	.target sm_10, map_f64_to_f32
	// compiled with /usr/lib/nvidia-cuda-toolkit/lib//be
	// nvopencc 4.1 built on 2013-07-17

	//-----------------------------------------------------------
	// Compiling /tmp/tmpxft_000054e0_00000000-9_KernelUnitTests.cpp3.i (/tmp/ccBI#.RN9Fos)
	//-----------------------------------------------------------

	//-----------------------------------------------------------
	// Options:
	//-----------------------------------------------------------
	//  Target:ptx, ISA:sm_10, Endian:little, Pointer Size:64
	//  -O3	(Optimization level)
	//  -g0	(Debug level)
	//  -m2	(Report advisories)
	//-----------------------------------------------------------

	.file	1	"<command-line>"
	.file	2	"/usr/include/stdc-predef.h"
	.file	3	"/tmp/tmpxft_000054e0_00000000-8_KernelUnitTests.cudafe2.gpu"
	.file	4	"Vector.cuh"
	.file	5	"/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
	.file	6	"/usr/include/crt/device_runtime.h"
	.file	7	"/usr/include/host_defines.h"
	.file	8	"/usr/include/builtin_types.h"
	.file	9	"/usr/include/device_types.h"
	.file	10	"/usr/include/driver_types.h"
	.file	11	"/usr/include/surface_types.h"
	.file	12	"/usr/include/texture_types.h"
	.file	13	"/usr/include/vector_types.h"
	.file	14	"/usr/include/device_launch_parameters.h"
	.file	15	"/usr/include/crt/storage_class.h"
	.file	16	"KernelUnitTests.cu"
	.file	17	"/usr/include/common_functions.h"
	.file	18	"/usr/include/math_functions.h"
	.file	19	"/usr/include/math_constants.h"
	.file	20	"/usr/include/device_functions.h"
	.file	21	"/usr/include/sm_11_atomic_functions.h"
	.file	22	"/usr/include/sm_12_atomic_functions.h"
	.file	23	"/usr/include/sm_13_double_functions.h"
	.file	24	"/usr/include/sm_20_atomic_functions.h"
	.file	25	"/usr/include/sm_32_atomic_functions.h"
	.file	26	"/usr/include/sm_35_atomic_functions.h"
	.file	27	"/usr/include/sm_20_intrinsics.h"
	.file	28	"/usr/include/sm_30_intrinsics.h"
	.file	29	"/usr/include/sm_32_intrinsics.h"
	.file	30	"/usr/include/sm_35_intrinsics.h"
	.file	31	"/usr/include/surface_functions.h"
	.file	32	"/usr/include/texture_fetch_functions.h"
	.file	33	"/usr/include/texture_indirect_functions.h"
	.file	34	"/usr/include/surface_indirect_functions.h"
	.file	35	"/usr/include/math_functions_dbl_ptx1.h"


	.entry TestCrossProduct (
		.param .s32 __cudaparm_TestCrossProduct_Count,
		.param .u64 __cudaparm_TestCrossProduct_A,
		.param .u64 __cudaparm_TestCrossProduct_B,
		.param .u64 __cudaparm_TestCrossProduct_C)
	{
	.reg .u16 %rh<7>;
	.reg .u32 %r<21>;
	.reg .u64 %rd<10>;
	.reg .f32 %f<17>;
	.reg .pred %p<3>;
	.loc	16	12	0
$LDWbegin_TestCrossProduct:
	mov.u16 	%rh1, %ntid.y;
	mov.u16 	%rh2, %tid.x;
	mul.wide.u16 	%r1, %rh2, %rh1;
	mov.u16 	%rh3, %ctaid.x;
	mov.u16 	%rh4, %nctaid.y;
	mul.wide.u16 	%r2, %rh3, %rh4;
	mov.u16 	%rh5, %ntid.x;
	mul.wide.u16 	%r3, %rh5, %rh1;
	cvt.u32.u16 	%r4, %tid.y;
	add.u32 	%r5, %r4, %r1;
	cvt.u32.u16 	%r6, %ctaid.y;
	add.u32 	%r7, %r6, %r2;
	cvt.u32.u16 	%r8, %ntid.z;
	mul.lo.u32 	%r9, %r3, %r8;
	mul.lo.u32 	%r10, %r5, %r8;
	cvt.u32.u16 	%r11, %nctaid.z;
	mul.lo.u32 	%r12, %r11, %r7;
	cvt.u32.u16 	%r13, %tid.z;
	add.u32 	%r14, %r13, %r10;
	cvt.u32.u16 	%r15, %ctaid.z;
	add.u32 	%r16, %r15, %r12;
	mul.lo.u32 	%r17, %r9, %r16;
	add.u32 	%r18, %r14, %r17;
	ld.param.s32 	%r19, [__cudaparm_TestCrossProduct_Count];
	setp.le.s32 	%p1, %r19, %r18;
	@%p1 bra 	$Lt_0_1026;
	.loc	16	19	0
	cvt.s64.s32 	%rd1, %r18;
	mul.wide.s32 	%rd2, %r18, 12;
	ld.param.u64 	%rd3, [__cudaparm_TestCrossProduct_B];
	add.u64 	%rd4, %rd3, %rd2;
	ld.global.f32 	%f1, [%rd4+0];
	ld.global.f32 	%f2, [%rd4+4];
	ld.global.f32 	%f3, [%rd4+8];
	.loc	4	18	0
	ld.param.u64 	%rd5, [__cudaparm_TestCrossProduct_A];
	add.u64 	%rd6, %rd5, %rd2;
	ld.global.f32 	%f4, [%rd6+8];
	ld.global.f32 	%f5, [%rd6+4];
	mul.f32 	%f6, %f4, %f2;
	mul.f32 	%f7, %f5, %f3;
	sub.f32 	%f8, %f7, %f6;
	.loc	4	19	0
	ld.global.f32 	%f9, [%rd6+0];
	mul.f32 	%f10, %f9, %f3;
	mul.f32 	%f11, %f4, %f1;
	sub.f32 	%f12, %f11, %f10;
	.loc	4	20	0
	mul.f32 	%f13, %f5, %f1;
	mul.f32 	%f14, %f9, %f2;
	sub.f32 	%f15, %f14, %f13;
	.loc	16	19	0
	ld.param.u64 	%rd7, [__cudaparm_TestCrossProduct_C];
	add.u64 	%rd8, %rd7, %rd2;
	st.global.f32 	[%rd8+0], %f8;
	st.global.f32 	[%rd8+4], %f12;
	st.global.f32 	[%rd8+8], %f15;
$Lt_0_1026:
	.loc	16	22	0
	exit;
$LDWend_TestCrossProduct:
	} // TestCrossProduct

	.entry TestDotProduct (
		.param .s32 __cudaparm_TestDotProduct_Count,
		.param .u64 __cudaparm_TestDotProduct_A,
		.param .u64 __cudaparm_TestDotProduct_B,
		.param .u64 __cudaparm_TestDotProduct_C)
	{
	.reg .u16 %rh<7>;
	.reg .u32 %r<21>;
	.reg .u64 %rd<11>;
	.reg .f32 %f<11>;
	.reg .pred %p<3>;
	.loc	16	27	0
$LDWbegin_TestDotProduct:
	mov.u16 	%rh1, %ntid.y;
	mov.u16 	%rh2, %tid.x;
	mul.wide.u16 	%r1, %rh2, %rh1;
	mov.u16 	%rh3, %ctaid.x;
	mov.u16 	%rh4, %nctaid.y;
	mul.wide.u16 	%r2, %rh3, %rh4;
	mov.u16 	%rh5, %ntid.x;
	mul.wide.u16 	%r3, %rh5, %rh1;
	cvt.u32.u16 	%r4, %tid.y;
	add.u32 	%r5, %r4, %r1;
	cvt.u32.u16 	%r6, %ctaid.y;
	add.u32 	%r7, %r6, %r2;
	cvt.u32.u16 	%r8, %ntid.z;
	mul.lo.u32 	%r9, %r3, %r8;
	mul.lo.u32 	%r10, %r5, %r8;
	cvt.u32.u16 	%r11, %nctaid.z;
	mul.lo.u32 	%r12, %r11, %r7;
	cvt.u32.u16 	%r13, %tid.z;
	add.u32 	%r14, %r13, %r10;
	cvt.u32.u16 	%r15, %ctaid.z;
	add.u32 	%r16, %r15, %r12;
	mul.lo.u32 	%r17, %r9, %r16;
	add.u32 	%r18, %r14, %r17;
	ld.param.s32 	%r19, [__cudaparm_TestDotProduct_Count];
	setp.le.s32 	%p1, %r19, %r18;
	@%p1 bra 	$Lt_1_1026;
	.loc	4	12	0
	cvt.s64.s32 	%rd1, %r18;
	mul.wide.s32 	%rd2, %r18, 12;
	ld.param.u64 	%rd3, [__cudaparm_TestDotProduct_A];
	add.u64 	%rd4, %rd3, %rd2;
	ld.param.u64 	%rd5, [__cudaparm_TestDotProduct_B];
	add.u64 	%rd6, %rd5, %rd2;
	ld.global.f32 	%f1, [%rd4+4];
	ld.global.f32 	%f2, [%rd6+4];
	mul.f32 	%f3, %f1, %f2;
	ld.global.f32 	%f4, [%rd4+0];
	ld.global.f32 	%f5, [%rd6+0];
	mad.f32 	%f6, %f4, %f5, %f3;
	ld.global.f32 	%f7, [%rd4+8];
	ld.global.f32 	%f8, [%rd6+8];
	mad.f32 	%f9, %f7, %f8, %f6;
	.loc	16	34	0
	ld.param.u64 	%rd7, [__cudaparm_TestDotProduct_C];
	mul.wide.s32 	%rd8, %r18, 4;
	add.u64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9+0], %f9;
$Lt_1_1026:
	.loc	16	37	0
	exit;
$LDWend_TestDotProduct:
	} // TestDotProduct

	.entry TestAdd (
		.param .s32 __cudaparm_TestAdd_Count,
		.param .u64 __cudaparm_TestAdd_A,
		.param .u64 __cudaparm_TestAdd_B,
		.param .u64 __cudaparm_TestAdd_C)
	{
	.reg .u16 %rh<7>;
	.reg .u32 %r<21>;
	.reg .u64 %rd<10>;
	.reg .f32 %f<11>;
	.reg .pred %p<3>;
	.loc	16	42	0
$LDWbegin_TestAdd:
	mov.u16 	%rh1, %ntid.y;
	mov.u16 	%rh2, %tid.x;
	mul.wide.u16 	%r1, %rh2, %rh1;
	mov.u16 	%rh3, %ctaid.x;
	mov.u16 	%rh4, %nctaid.y;
	mul.wide.u16 	%r2, %rh3, %rh4;
	mov.u16 	%rh5, %ntid.x;
	mul.wide.u16 	%r3, %rh5, %rh1;
	cvt.u32.u16 	%r4, %tid.y;
	add.u32 	%r5, %r4, %r1;
	cvt.u32.u16 	%r6, %ctaid.y;
	add.u32 	%r7, %r6, %r2;
	cvt.u32.u16 	%r8, %ntid.z;
	mul.lo.u32 	%r9, %r3, %r8;
	mul.lo.u32 	%r10, %r5, %r8;
	cvt.u32.u16 	%r11, %nctaid.z;
	mul.lo.u32 	%r12, %r11, %r7;
	cvt.u32.u16 	%r13, %tid.z;
	add.u32 	%r14, %r13, %r10;
	cvt.u32.u16 	%r15, %ctaid.z;
	add.u32 	%r16, %r15, %r12;
	mul.lo.u32 	%r17, %r9, %r16;
	add.u32 	%r18, %r14, %r17;
	ld.param.s32 	%r19, [__cudaparm_TestAdd_Count];
	setp.le.s32 	%p1, %r19, %r18;
	@%p1 bra 	$Lt_2_1026;
	.loc	4	27	0
	cvt.s64.s32 	%rd1, %r18;
	mul.wide.s32 	%rd2, %r18, 12;
	ld.param.u64 	%rd3, [__cudaparm_TestAdd_A];
	add.u64 	%rd4, %rd3, %rd2;
	ld.param.u64 	%rd5, [__cudaparm_TestAdd_B];
	add.u64 	%rd6, %rd5, %rd2;
	ld.global.f32 	%f1, [%rd4+4];
	ld.global.f32 	%f2, [%rd6+4];
	add.f32 	%f3, %f1, %f2;
	.loc	4	28	0
	ld.global.f32 	%f4, [%rd4+8];
	ld.global.f32 	%f5, [%rd6+8];
	add.f32 	%f6, %f4, %f5;
	.loc	16	49	0
	ld.param.u64 	%rd7, [__cudaparm_TestAdd_C];
	add.u64 	%rd8, %rd7, %rd2;
	ld.global.f32 	%f7, [%rd4+0];
	ld.global.f32 	%f8, [%rd6+0];
	add.f32 	%f9, %f7, %f8;
	st.global.f32 	[%rd8+0], %f9;
	st.global.f32 	[%rd8+4], %f3;
	st.global.f32 	[%rd8+8], %f6;
$Lt_2_1026:
	.loc	16	51	0
	exit;
$LDWend_TestAdd:
	} // TestAdd

	.entry TestSubtract (
		.param .s32 __cudaparm_TestSubtract_Count,
		.param .u64 __cudaparm_TestSubtract_A,
		.param .u64 __cudaparm_TestSubtract_B,
		.param .u64 __cudaparm_TestSubtract_C)
	{
	.reg .u16 %rh<7>;
	.reg .u32 %r<21>;
	.reg .u64 %rd<10>;
	.reg .f32 %f<11>;
	.reg .pred %p<3>;
	.loc	16	56	0
$LDWbegin_TestSubtract:
	mov.u16 	%rh1, %ntid.y;
	mov.u16 	%rh2, %tid.x;
	mul.wide.u16 	%r1, %rh2, %rh1;
	mov.u16 	%rh3, %ctaid.x;
	mov.u16 	%rh4, %nctaid.y;
	mul.wide.u16 	%r2, %rh3, %rh4;
	mov.u16 	%rh5, %ntid.x;
	mul.wide.u16 	%r3, %rh5, %rh1;
	cvt.u32.u16 	%r4, %tid.y;
	add.u32 	%r5, %r4, %r1;
	cvt.u32.u16 	%r6, %ctaid.y;
	add.u32 	%r7, %r6, %r2;
	cvt.u32.u16 	%r8, %ntid.z;
	mul.lo.u32 	%r9, %r3, %r8;
	mul.lo.u32 	%r10, %r5, %r8;
	cvt.u32.u16 	%r11, %nctaid.z;
	mul.lo.u32 	%r12, %r11, %r7;
	cvt.u32.u16 	%r13, %tid.z;
	add.u32 	%r14, %r13, %r10;
	cvt.u32.u16 	%r15, %ctaid.z;
	add.u32 	%r16, %r15, %r12;
	mul.lo.u32 	%r17, %r9, %r16;
	add.u32 	%r18, %r14, %r17;
	ld.param.s32 	%r19, [__cudaparm_TestSubtract_Count];
	setp.le.s32 	%p1, %r19, %r18;
	@%p1 bra 	$Lt_3_1026;
	.loc	4	35	0
	cvt.s64.s32 	%rd1, %r18;
	mul.wide.s32 	%rd2, %r18, 12;
	ld.param.u64 	%rd3, [__cudaparm_TestSubtract_A];
	add.u64 	%rd4, %rd3, %rd2;
	ld.param.u64 	%rd5, [__cudaparm_TestSubtract_B];
	add.u64 	%rd6, %rd5, %rd2;
	ld.global.f32 	%f1, [%rd4+4];
	ld.global.f32 	%f2, [%rd6+4];
	sub.f32 	%f3, %f1, %f2;
	.loc	4	36	0
	ld.global.f32 	%f4, [%rd4+8];
	ld.global.f32 	%f5, [%rd6+8];
	sub.f32 	%f6, %f4, %f5;
	.loc	16	63	0
	ld.param.u64 	%rd7, [__cudaparm_TestSubtract_C];
	add.u64 	%rd8, %rd7, %rd2;
	ld.global.f32 	%f7, [%rd4+0];
	ld.global.f32 	%f8, [%rd6+0];
	sub.f32 	%f9, %f7, %f8;
	st.global.f32 	[%rd8+0], %f9;
	st.global.f32 	[%rd8+4], %f3;
	st.global.f32 	[%rd8+8], %f6;
$Lt_3_1026:
	.loc	16	65	0
	exit;
$LDWend_TestSubtract:
	} // TestSubtract

	.entry TestMultiply (
		.param .s32 __cudaparm_TestMultiply_Count,
		.param .u64 __cudaparm_TestMultiply_A,
		.param .u64 __cudaparm_TestMultiply_B,
		.param .u64 __cudaparm_TestMultiply_C)
	{
	.reg .u16 %rh<7>;
	.reg .u32 %r<21>;
	.reg .u64 %rd<11>;
	.reg .f32 %f<9>;
	.reg .pred %p<3>;
	.loc	16	70	0
$LDWbegin_TestMultiply:
	mov.u16 	%rh1, %ntid.y;
	mov.u16 	%rh2, %tid.x;
	mul.wide.u16 	%r1, %rh2, %rh1;
	mov.u16 	%rh3, %ctaid.x;
	mov.u16 	%rh4, %nctaid.y;
	mul.wide.u16 	%r2, %rh3, %rh4;
	mov.u16 	%rh5, %ntid.x;
	mul.wide.u16 	%r3, %rh5, %rh1;
	cvt.u32.u16 	%r4, %tid.y;
	add.u32 	%r5, %r4, %r1;
	cvt.u32.u16 	%r6, %ctaid.y;
	add.u32 	%r7, %r6, %r2;
	cvt.u32.u16 	%r8, %ntid.z;
	mul.lo.u32 	%r9, %r3, %r8;
	mul.lo.u32 	%r10, %r5, %r8;
	cvt.u32.u16 	%r11, %nctaid.z;
	mul.lo.u32 	%r12, %r11, %r7;
	cvt.u32.u16 	%r13, %tid.z;
	add.u32 	%r14, %r13, %r10;
	cvt.u32.u16 	%r15, %ctaid.z;
	add.u32 	%r16, %r15, %r12;
	mul.lo.u32 	%r17, %r9, %r16;
	add.u32 	%r18, %r14, %r17;
	ld.param.s32 	%r19, [__cudaparm_TestMultiply_Count];
	setp.le.s32 	%p1, %r19, %r18;
	@%p1 bra 	$Lt_4_1026;
	.loc	16	77	0
	cvt.s64.s32 	%rd1, %r18;
	ld.param.u64 	%rd2, [__cudaparm_TestMultiply_B];
	mul.wide.s32 	%rd3, %r18, 4;
	add.u64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f1, [%rd4+0];
	.loc	4	43	0
	mul.wide.s32 	%rd5, %r18, 12;
	ld.param.u64 	%rd6, [__cudaparm_TestMultiply_A];
	add.u64 	%rd7, %rd6, %rd5;
	ld.global.f32 	%f2, [%rd7+4];
	mul.f32 	%f3, %f2, %f1;
	.loc	4	44	0
	ld.global.f32 	%f4, [%rd7+8];
	mul.f32 	%f5, %f4, %f1;
	.loc	16	77	0
	ld.param.u64 	%rd8, [__cudaparm_TestMultiply_C];
	add.u64 	%rd9, %rd8, %rd5;
	ld.global.f32 	%f6, [%rd7+0];
	mul.f32 	%f7, %f6, %f1;
	st.global.f32 	[%rd9+0], %f7;
	st.global.f32 	[%rd9+4], %f3;
	st.global.f32 	[%rd9+8], %f5;
$Lt_4_1026:
	.loc	16	79	0
	exit;
$LDWend_TestMultiply:
	} // TestMultiply

	.entry TestDivide (
		.param .s32 __cudaparm_TestDivide_Count,
		.param .u64 __cudaparm_TestDivide_A,
		.param .u64 __cudaparm_TestDivide_B,
		.param .u64 __cudaparm_TestDivide_C)
	{
	.reg .u16 %rh<7>;
	.reg .u32 %r<21>;
	.reg .u64 %rd<11>;
	.reg .f32 %f<9>;
	.reg .pred %p<3>;
	.loc	16	84	0
$LDWbegin_TestDivide:
	mov.u16 	%rh1, %ntid.y;
	mov.u16 	%rh2, %tid.x;
	mul.wide.u16 	%r1, %rh2, %rh1;
	mov.u16 	%rh3, %ctaid.x;
	mov.u16 	%rh4, %nctaid.y;
	mul.wide.u16 	%r2, %rh3, %rh4;
	mov.u16 	%rh5, %ntid.x;
	mul.wide.u16 	%r3, %rh5, %rh1;
	cvt.u32.u16 	%r4, %tid.y;
	add.u32 	%r5, %r4, %r1;
	cvt.u32.u16 	%r6, %ctaid.y;
	add.u32 	%r7, %r6, %r2;
	cvt.u32.u16 	%r8, %ntid.z;
	mul.lo.u32 	%r9, %r3, %r8;
	mul.lo.u32 	%r10, %r5, %r8;
	cvt.u32.u16 	%r11, %nctaid.z;
	mul.lo.u32 	%r12, %r11, %r7;
	cvt.u32.u16 	%r13, %tid.z;
	add.u32 	%r14, %r13, %r10;
	cvt.u32.u16 	%r15, %ctaid.z;
	add.u32 	%r16, %r15, %r12;
	mul.lo.u32 	%r17, %r9, %r16;
	add.u32 	%r18, %r14, %r17;
	ld.param.s32 	%r19, [__cudaparm_TestDivide_Count];
	setp.le.s32 	%p1, %r19, %r18;
	@%p1 bra 	$Lt_5_1026;
	.loc	16	91	0
	cvt.s64.s32 	%rd1, %r18;
	ld.param.u64 	%rd2, [__cudaparm_TestDivide_B];
	mul.wide.s32 	%rd3, %r18, 4;
	add.u64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f1, [%rd4+0];
	.loc	4	51	0
	mul.wide.s32 	%rd5, %r18, 12;
	ld.param.u64 	%rd6, [__cudaparm_TestDivide_A];
	add.u64 	%rd7, %rd6, %rd5;
	ld.global.f32 	%f2, [%rd7+4];
	.loc	4	52	0
	ld.global.f32 	%f3, [%rd7+8];
	.loc	16	91	0
	ld.param.u64 	%rd8, [__cudaparm_TestDivide_C];
	add.u64 	%rd9, %rd8, %rd5;
	ld.global.f32 	%f4, [%rd7+0];
	div.full.f32 	%f5, %f4, %f1;
	st.global.f32 	[%rd9+0], %f5;
	div.full.f32 	%f6, %f2, %f1;
	st.global.f32 	[%rd9+4], %f6;
	div.full.f32 	%f7, %f3, %f1;
	st.global.f32 	[%rd9+8], %f7;
$Lt_5_1026:
	.loc	16	93	0
	exit;
$LDWend_TestDivide:
	} // TestDivide

	.entry TestLength (
		.param .s32 __cudaparm_TestLength_Count,
		.param .u64 __cudaparm_TestLength_A,
		.param .u64 __cudaparm_TestLength_B)
	{
	.reg .u16 %rh<7>;
	.reg .u32 %r<21>;
	.reg .u64 %rd<9>;
	.reg .f32 %f<9>;
	.reg .pred %p<3>;
	.loc	16	98	0
$LDWbegin_TestLength:
	mov.u16 	%rh1, %ntid.y;
	mov.u16 	%rh2, %tid.x;
	mul.wide.u16 	%r1, %rh2, %rh1;
	mov.u16 	%rh3, %ctaid.x;
	mov.u16 	%rh4, %nctaid.y;
	mul.wide.u16 	%r2, %rh3, %rh4;
	mov.u16 	%rh5, %ntid.x;
	mul.wide.u16 	%r3, %rh5, %rh1;
	cvt.u32.u16 	%r4, %tid.y;
	add.u32 	%r5, %r4, %r1;
	cvt.u32.u16 	%r6, %ctaid.y;
	add.u32 	%r7, %r6, %r2;
	cvt.u32.u16 	%r8, %ntid.z;
	mul.lo.u32 	%r9, %r3, %r8;
	mul.lo.u32 	%r10, %r5, %r8;
	cvt.u32.u16 	%r11, %nctaid.z;
	mul.lo.u32 	%r12, %r11, %r7;
	cvt.u32.u16 	%r13, %tid.z;
	add.u32 	%r14, %r13, %r10;
	cvt.u32.u16 	%r15, %ctaid.z;
	add.u32 	%r16, %r15, %r12;
	mul.lo.u32 	%r17, %r9, %r16;
	add.u32 	%r18, %r14, %r17;
	ld.param.s32 	%r19, [__cudaparm_TestLength_Count];
	setp.le.s32 	%p1, %r19, %r18;
	@%p1 bra 	$Lt_6_1026;
	.loc	4	57	0
	cvt.s64.s32 	%rd1, %r18;
	ld.param.u64 	%rd2, [__cudaparm_TestLength_A];
	mul.wide.s32 	%rd3, %r18, 12;
	add.u64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f1, [%rd4+4];
	ld.global.f32 	%f2, [%rd4+0];
	ld.global.f32 	%f3, [%rd4+8];
	mul.f32 	%f4, %f1, %f1;
	mad.f32 	%f5, %f2, %f2, %f4;
	mad.f32 	%f6, %f3, %f3, %f5;
	.loc	16	105	0
	sqrt.approx.f32 	%f7, %f6;
	ld.param.u64 	%rd5, [__cudaparm_TestLength_B];
	mul.wide.s32 	%rd6, %r18, 4;
	add.u64 	%rd7, %rd5, %rd6;
	st.global.f32 	[%rd7+0], %f7;
$Lt_6_1026:
	.loc	16	107	0
	exit;
$LDWend_TestLength:
	} // TestLength

	.entry TestNormalize (
		.param .s32 __cudaparm_TestNormalize_Count,
		.param .u64 __cudaparm_TestNormalize_A,
		.param .u64 __cudaparm_TestNormalize_B)
	{
	.reg .u16 %rh<7>;
	.reg .u32 %r<21>;
	.reg .u64 %rd<8>;
	.reg .f32 %f<14>;
	.reg .pred %p<3>;
	.loc	16	111	0
$LDWbegin_TestNormalize:
	mov.u16 	%rh1, %ntid.y;
	mov.u16 	%rh2, %tid.x;
	mul.wide.u16 	%r1, %rh2, %rh1;
	mov.u16 	%rh3, %ctaid.x;
	mov.u16 	%rh4, %nctaid.y;
	mul.wide.u16 	%r2, %rh3, %rh4;
	mov.u16 	%rh5, %ntid.x;
	mul.wide.u16 	%r3, %rh5, %rh1;
	cvt.u32.u16 	%r4, %tid.y;
	add.u32 	%r5, %r4, %r1;
	cvt.u32.u16 	%r6, %ctaid.y;
	add.u32 	%r7, %r6, %r2;
	cvt.u32.u16 	%r8, %ntid.z;
	mul.lo.u32 	%r9, %r3, %r8;
	mul.lo.u32 	%r10, %r5, %r8;
	cvt.u32.u16 	%r11, %nctaid.z;
	mul.lo.u32 	%r12, %r11, %r7;
	cvt.u32.u16 	%r13, %tid.z;
	add.u32 	%r14, %r13, %r10;
	cvt.u32.u16 	%r15, %ctaid.z;
	add.u32 	%r16, %r15, %r12;
	mul.lo.u32 	%r17, %r9, %r16;
	add.u32 	%r18, %r14, %r17;
	ld.param.s32 	%r19, [__cudaparm_TestNormalize_Count];
	setp.le.s32 	%p1, %r19, %r18;
	@%p1 bra 	$Lt_7_1026;
	.loc	16	118	0
	cvt.s64.s32 	%rd1, %r18;
	mul.wide.s32 	%rd2, %r18, 12;
	ld.param.u64 	%rd3, [__cudaparm_TestNormalize_A];
	add.u64 	%rd4, %rd3, %rd2;
	ld.param.u64 	%rd5, [__cudaparm_TestNormalize_B];
	add.u64 	%rd6, %rd5, %rd2;
	ld.global.f32 	%f1, [%rd4+0];
	st.global.f32 	[%rd6+0], %f1;
	ld.global.f32 	%f2, [%rd4+4];
	st.global.f32 	[%rd6+4], %f2;
	ld.global.f32 	%f3, [%rd4+8];
	st.global.f32 	[%rd6+8], %f3;
	.loc	4	63	0
	ld.global.f32 	%f4, [%rd6+0];
	ld.global.f32 	%f5, [%rd6+4];
	mul.f32 	%f6, %f5, %f5;
	mad.f32 	%f7, %f4, %f4, %f6;
	mad.f32 	%f8, %f3, %f3, %f7;
	.loc	4	64	0
	sqrt.approx.f32 	%f9, %f8;
	div.full.f32 	%f10, %f4, %f9;
	st.global.f32 	[%rd6+0], %f10;
	.loc	4	65	0
	div.full.f32 	%f11, %f5, %f9;
	st.global.f32 	[%rd6+4], %f11;
	.loc	4	66	0
	div.full.f32 	%f12, %f3, %f9;
	st.global.f32 	[%rd6+8], %f12;
$Lt_7_1026:
	.loc	16	121	0
	exit;
$LDWend_TestNormalize:
	} // TestNormalize

