// This kernel computes the elemental stiffness matrix value and then adds it the global stiffness matrix

// the shape functions will be generic in form (in natural coordinates)
// L1-L2-L3-L4, etc for tetrahedral family
// X-Y-Z for hexahedral family

// this generic polynomial form can be exploited in shared memory so that less reads to global memory are needed

// to transform this generic polynomial into a specific element matrix, numerical integration of the jacobian is needed

// also to help mitigate atomic collisions, each thread should do work on a set number of elements that are adjacent in memory since elements adjacent in memory are likely to share more nodes

template <typename T> // A[Rows][Cols]
__device__ T Determinant2(T A[2][2]) {
	
	T a = A[0][0]; T b = A[0][1];
	T c = A[1][0]; T d = A[1][1];
	
	T ans = a*d - b*c;
	
	return ans;
}

template <typename T>
__device__ T Determinant3(T A[3][3]) { // expansion from wolfram alpha
	
	T a = A[0][0]; T b = A[0][1]; T c = A[0][2];
	T d = A[1][0]; T e = A[1][1]; T f = A[1][2];
	T g = A[2][0]; T h = A[2][1]; T i = A[2][2];
	
	T ans = a*e*i - a*f*h - b*d*i + b*f*g + c*d*h - c*e*g;
	
	return ans;
}

template <typename T>
__device__ T Determinant4(T A[4][4]) { // expansion from wolfram alpha

	T a = A[0][0]; T b = A[0][1]; T c = A[0][2]; T d = A[0][3];
	T e = A[1][0]; T f = A[1][1]; T g = A[1][2]; T h = A[1][3];
	T i = A[2][0]; T j = A[2][1]; T k = A[2][2]; T l = A[2][3];
	T m = A[3][0]; T n = A[3][1]; T o = A[3][2]; T p = A[3][3];
	
	T ans = 	
	a*f*k*p - a*f*l*o - a*g*j*p + a*g*l*n + a*h*j*o - a*h*k*n - b*e*k*p + b*e*l*o +
	b*g*i*p - b*g*l*m - b*h*i*o + b*h*k*m + c*e*j*p - c*e*l*n - c*f*i*p + c*f*l*m + 
	c*h*i*n - c*h*j*m - d*e*j*o + d*e*k*n + d*f*i*o - d*f*k*m - d*g*i*n + d*g*j*m;
	
	return ans;
}



extern "C" __global__ float CalcDeterminant2_Single(float *APtr) {
	const int Size = 2;
	float A[Size][Size];
	for (int i = 0; i < Size; i++) {
		for (int j = 0; j < Size; j++) {
			A[i][j] = APtr[i * Size + j];
		}	
	}
	float ans = Determinant2<float>(A);
	return ans; 
}



 

